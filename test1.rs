fn eval_dfdx(params: &[f64]) -> Vec<Vec<f64>> {
    let mut v = vec![vec![0.0;4];4];
    let t0 = 0.00000000;
    v[0][0] = t0;
    let t1 = 1.00000000;
    v[0][1] = t1;
    let t2 = 0.00000000;
    v[0][2] = t2;
    let t3 = 0.00000000;
    v[0][3] = t3;
    let t4 = t2 + t3;
    let t5 = t4.sin();
    let t6 = t0.powf(2.00000000);
    let t7 = t5.powf(2.00000000);
    let t8 = t6 * t7;
    let t9 = vals[1];
    let t10 = vals[2];
    let t11 = vals[0];
    let t12 = -t10;
    let t13 = t11 + t12;
    let t14 = t9.powf(2.00000000);
    let t15 = t13.cos();
    let t16 = vals[3];
    let t17 = t14 * t15;
    let t18 = t16.powf(2.00000000);
    let t19 = vals[2];
    let t20 = vals[0];
    let t21 = -t19;
    let t22 = t20 + t21;
    let t23 = t17 + t18;
    let t24 = t22.cos();
    let t25 = t23 * t24;
    let t26 = t25 * 2.00000000;
    let t27 = vals[2];
    let t28 = vals[2];
    let t29 = vals[0];
    let t30 = -t28;
    let t31 = t29 + t30;
    let t32 = t27.sin();
    let t33 = t31.sin();
    let t34 = t32 * t33;
    let t35 = t34 * 19.62000000;
    let t36 = vals[0];
    let t37 = t36.cos();
    let t38 = t37 * 29.43000000;
    let t39 = t8 * 2.00000000;
    let t40 = -t26;
    let t41 = t39 + t40;
    let t42 = -t35;
    let t43 = t41 + t42;
    let t44 = -t38;
    let t45 = vals[2];
    let t46 = vals[0];
    let t47 = -t45;
    let t48 = t46 + t47;
    let t49 = t48.sin();
    let t50 = t49.powf(2.00000000);
    let t51 = t50 * 2.00000000;
    let t52 = t51 + 1.00000000;
    let t53 = t43 + t44;
    let t54 = 1.0 / t52;
    let t55 = vals[1];
    let t56 = -t55;
    let t57 = vals[1];
    let t58 = t57.powf(2.00000000);
    let t59 = t58 + 0.00000000;
    let t60 = t59.powf(0.50000000);
    let t61 = t56.powf(3.00000000);
    let t62 = 1.0 / t60;
    let t63 = vals[1];
    let t64 = vals[2];
    let t65 = vals[0];
    let t66 = -t64;
    let t67 = t65 + t66;
    let t68 = t63.powf(2.00000000);
    let t69 = t67.cos();
    let t70 = vals[3];
    let t71 = t68 * t69;
    let t72 = t70.powf(2.00000000);
    let t73 = vals[2];
    let t74 = vals[0];
    let t75 = -t73;
    let t76 = t74 + t75;
    let t77 = t71 + t72;
    let t78 = t76.sin();
    let t79 = t77 * t78;
    let t80 = t79 * 2.00000000;
    let t81 = vals[0];
    let t82 = t81.sin();
    let t83 = t82 * 29.43000000;
    let t84 = vals[2];
    let t85 = vals[2];
    let t86 = vals[0];
    let t87 = -t85;
    let t88 = t86 + t87;
    let t89 = t84.sin();
    let t90 = t88.cos();
    let t91 = t89 * t90;
    let t92 = t61 * t62;
    let t93 = -t83;
    let t94 = t92 + t93;
    let t95 = -t80;
    let t96 = t94 + t95;
    let t97 = vals[4];
    let t98 = t96 + t97;
    let t99 = t91 * 19.62000000;
    let t100 = vals[2];
    let t101 = vals[0];
    let t102 = -t100;
    let t103 = t101 + t102;
    let t104 = vals[2];
    let t105 = vals[0];
    let t106 = -t104;
    let t107 = t105 + t106;
    let t108 = vals[2];
    let t109 = vals[0];
    let t110 = -t108;
    let t111 = t109 + t110;
    let t112 = t111.sin();
    let t113 = t112.powf(2.00000000);
    let t114 = t113 * 2.00000000;
    let t115 = t114 + 1.00000000;
    let t116 = t115.powf(2.00000000);
    let t117 = t98 + t99;
    let t118 = t103.sin();
    let t119 = t117 * t118;
    let t120 = 1.0 / t116;
    let t121 = t119 * t120;
    let t122 = t107.cos();
    let t123 = t121 * t122;
    let t124 = t123 * 4.00000000;
    let t125 = t53 * t54;
    let t126 = -t124;
   v[1][0] = t126;
   v[1][1] = t126;
    let t127 = t56 * t57;
    let t128 = t126 * 4.00000000;
   v[1][2] = t128;
   v[1][3] = t128;
    let t129 = 0.00000000;
    v[2][0] = t129;
    let t130 = 0.00000000;
    v[2][1] = t130;
    let t131 = 0.00000000;
    v[2][2] = t131;
    let t132 = 1.00000000;
    v[2][3] = t132;
    let t133 = 1.0 / t129;
    let t134 = t132 * t133;
    let t135 = t120.cos();
    let t136 = t134 * t135;
    let t137 = t136 * 4.00000000;
    let t138 = t60 * t61;
    let t139 = -t137;
   v[3][0] = t139;
   v[3][1] = t139;
   v[3][2] = t139;
   v[3][3] = t139;
    v
}
fn eval_dfdu(params: &[f64]) -> Vec<Vec<f64>> {
    let mut v = vec![vec![0.0;2];4];
    let t0 = 0.00000000;
    v[0][0] = t0;
    let t1 = 0.00000000;
    v[0][1] = t1;
    let t2 = -t0;
    let t3 = t1 + t2;
    let t4 = t3.sin();
    let t5 = t4.powf(2.00000000);
    let t6 = t5 * 2.00000000;
    let t7 = t6 + 1.00000000;
   v[1][0] = t7;
    let t8 = 0.00000000;
    v[1][1] = t8;
    let t9 = 0.00000000;
    v[2][0] = t9;
    let t10 = 0.00000000;
    v[2][1] = t10;
    let t11 = 0.00000000;
    v[3][0] = t11;
   v[3][1] = t11;
    v
}
